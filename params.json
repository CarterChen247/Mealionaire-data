{
  "name": "Mealionaire",
  "tagline": "Experiences of developing a mobile application",
  "body": "#Introduction\r\nMealinaire is a mobile app developed for explore nearby cuisine based on users' preferences and situation. Due to several invevitable reasons, it has stop operating.\r\n\r\n#Features & Solution\r\nUse 5 \"W\"s and 1 \"H\" to describe the feature and how we implement them:\r\n\r\n##Who\r\nWe are developing a recommender system, recommend proper items to the target user. We focus on people we have interest in exploring delicious foods. How do we know the preferece or taste of an user?\r\n\r\n**[Facebook Android SDK](https://developers.facebook.com/docs/android/)**\r\n\r\nFacebook Login making the process of user login more easier as well as improving user experiences. We also use the uid from access token to record users' preferences.\r\n\r\n**[Apache Jena](https://jena.apache.org/)**\r\n\r\nThe items(foods) in our database have their own categories, by creating an ontology of the food domain, it can help us to determine the taste of an user in a clear way. After that, we can build the user profile for each user.\r\n\r\n##What\r\n\r\nThe system offered cuisine information for user to explore. Those information mainly came from **[319papago](http://www.319papago.idv.tw/SuperTaste/01-E.html)**. The website includes plenty Taiwan restaurant data, and the categories is based on county.\r\n\r\nThe following is the cuisine data we have currently:\r\n* restaurants\r\n* dishes\r\n\r\n##where\r\n\r\nIn order to make user more easier to reach their restaurant of interest, we must consider the distance between restaurant and user. The system will show candicate items for user to choose which is ordered by distance from near to far. Introducing a [method](https://developers.google.com/maps/articles/phpsqlsearch_v3) to calculate the distance between two location on Earth:\r\n\r\n```sql\r\nSELECT id, ( 6371 * acos( cos( radians(37) ) * cos( radians( lat ) ) * cos( radians( lng ) - radians(-122) ) + sin( radians(37) ) * sin( radians( lat ) ) ) ) AS distance FROM markers HAVING distance < 25 ORDER BY distance LIMIT 0 , 20;\t\t\r\n```\r\n\r\n##when\r\n\r\nIn the beginning of building our database, we've already record the running hours of each restaurant in our database. While recommending cuisine to the user, the system will exclude the results which should not be appeared accroding to the user's current time.\r\n\r\n##why\r\n\r\nUser who are using our system will receive results when they are using exploring features. How do these results come from?\r\n\r\n**K-means Algorithm (Clustering)**\r\n\r\nWe use k-means algorithm to train the data, and we'll figure out users who has the similar tastes.\r\n\r\n**[Forecast.io](https://developer.forecast.io/)**\r\n\r\nWe use this API to get information such as weather and temperatures, and take these into consideration.\r\n\r\n**[Definition of \"Comfortable\"](http://escholarship.org/uc/item/2m34683k)**\r\n\r\nBy surveyed the literature which is researching the definitions of \"comfortable\", the system can recommend appropriate dishes to user considering the weather is rather cold or hot.\r\n\r\n##How\r\n\r\nNow that user can receive information relevant to the dishes she may like, we provide additional information such as recommended route and approximate time cost. It is implemented by:\r\n\r\n**[Maps Android API](https://developers.google.com/maps/documentation/android-api/)**\r\n\r\nAndroid version of Google Map\r\n\r\n**[Direction API](https://developers.google.com/maps/documentation/directions/intro)**\r\n\r\nEasy to use. For example:\r\n\r\n```\r\nhttps://maps.googleapis.com/maps/api/directions/json?origin=23.4789575,120.4492964&destination=25.0339031,121.5645098&avoid=highways\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}